-- Database Performance Optimization Migration
-- Adds comprehensive indexing, query optimization, and connection pooling
-- Generated by Claude Code for Release Notes Generator

-- ======================================
-- 1. ADVANCED INDEXING STRATEGY
-- ======================================


-- Ensure is_public column exists
ALTER TABLE release_notes ADD COLUMN IF NOT EXISTS is_public BOOLEAN DEFAULT false;

-- Release Notes Performance Indexes
-- Primary query pattern: organization_id + status + created_at (filtering and sorting)
CREATE INDEX IF NOT EXISTS idx_release_notes_org_status_created 
ON release_notes (organization_id, status, created_at DESC) 
WHERE status IN ('published', 'draft', 'scheduled');

-- Full-text search optimization for title and content
CREATE INDEX IF NOT EXISTS idx_release_notes_search_title 
ON release_notes USING gin(to_tsvector('english', title));

CREATE INDEX IF NOT EXISTS idx_release_notes_search_content 
ON release_notes USING gin(to_tsvector('english', content_markdown));

-- Public release notes (public pages optimization)
CREATE INDEX IF NOT EXISTS idx_release_notes_public_published 
ON release_notes (organization_id, is_public, published_at DESC) 
WHERE status = 'published' AND is_public = true;

-- Slug lookup optimization for public pages
CREATE INDEX IF NOT EXISTS idx_release_notes_org_slug 
ON release_notes (organization_id, slug) 
WHERE status = 'published';

-- Version-based queries
CREATE INDEX IF NOT EXISTS idx_release_notes_org_version 
ON release_notes (organization_id, version) 
WHERE version IS NOT NULL;

-- Published by queries
CREATE INDEX IF NOT EXISTS idx_release_notes_published_by_created 
ON release_notes (published_by, created_at DESC);

-- ======================================
-- Organization Performance Indexes
-- ======================================

-- Slug-based organization lookup (for public pages)
CREATE INDEX IF NOT EXISTS idx_organizations_slug 
ON organizations (slug) 
WHERE slug IS NOT NULL;

-- Custom domain lookup
CREATE INDEX IF NOT EXISTS idx_organizations_custom_domain 
ON organizations ((settings->>'custom_domain')) 
WHERE settings->>'custom_domain' IS NOT NULL;

-- ======================================
-- Integration Performance Indexes
-- ======================================

-- Integration type and status queries
CREATE INDEX IF NOT EXISTS idx_integrations_org_type_status 
ON integrations (org_id, type, (config->>'status')) 
WHERE config->>'status' IS NOT NULL;

-- External ID lookup for integration sync
CREATE INDEX IF NOT EXISTS idx_integrations_external_id 
ON integrations (type, external_id);

-- ======================================
-- Ticket Cache Performance Indexes
-- ======================================

-- Ticket lookup by integration and status
CREATE INDEX IF NOT EXISTS idx_ticket_cache_integration_status 
ON ticket_cache (integration_id, status, completed_at DESC NULLS LAST);

-- External ticket ID lookup for deduplication
CREATE INDEX IF NOT EXISTS idx_ticket_cache_external_id 
ON ticket_cache (integration_id, external_ticket_id);

-- Recent tickets for dashboard
CREATE INDEX IF NOT EXISTS idx_ticket_cache_recent 
ON ticket_cache (integration_id, fetched_at DESC) 
WHERE status IN ('completed', 'closed', 'done');

-- Ticket type filtering
CREATE INDEX IF NOT EXISTS idx_ticket_cache_type 
ON ticket_cache (integration_id, type) 
WHERE type IS NOT NULL;

-- ======================================
-- Organization Members Performance Indexes
-- ======================================

-- User role-based queries (most common pattern)
CREATE INDEX IF NOT EXISTS idx_org_members_user_role 
ON organization_members (user_id, role, org_id);

-- Organization member listing
CREATE INDEX IF NOT EXISTS idx_org_members_org_role_created 
ON organization_members (org_id, role, created_at DESC);

-- ======================================
-- Subscribers Performance Indexes
-- ======================================

-- Active subscribers for email campaigns
CREATE INDEX IF NOT EXISTS idx_subscribers_org_active 
ON subscribers (org_id, created_at DESC) 
WHERE status = 'active';

-- Email lookup for subscription management
CREATE INDEX IF NOT EXISTS idx_subscribers_email 
ON subscribers (email) 
WHERE status = 'active';

-- ======================================
-- 2. QUERY OPTIMIZATION FUNCTIONS
-- ======================================

-- Function for optimized release notes search with ranking
CREATE OR REPLACE FUNCTION search_release_notes(
  p_org_id UUID,
  p_search_query TEXT,
  p_status TEXT DEFAULT NULL,
  p_limit INTEGER DEFAULT 20,
  p_offset INTEGER DEFAULT 0
)
RETURNS TABLE (
  id UUID,
  title TEXT,
  slug TEXT,
  content_markdown TEXT,
  status TEXT,
  created_at TIMESTAMPTZ,
  publish_date TIMESTAMPTZ,
  rank REAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    rn.id,
    rn.title,
    rn.slug,
    rn.content_markdown,
    rn.status,
    rn.created_at,
    rn.publish_date,
    ts_rank(
      to_tsvector('english', rn.title || ' ' || COALESCE(rn.content_markdown, '')),
      plainto_tsquery('english', p_search_query)
    ) as rank
  FROM release_notes rn
  WHERE rn.org_id = p_org_id
    AND (p_status IS NULL OR rn.status = p_status)
    AND (
      to_tsvector('english', rn.title) @@ plainto_tsquery('english', p_search_query)
      OR to_tsvector('english', rn.content_markdown) @@ plainto_tsquery('english', p_search_query)
    )
  ORDER BY rank DESC, rn.created_at DESC
  LIMIT p_limit
  OFFSET p_offset;
END;
$$ LANGUAGE plpgsql STABLE;

-- Function for getting organization dashboard stats (optimized)
CREATE OR REPLACE FUNCTION get_organization_stats(p_org_id UUID)
RETURNS TABLE (
  total_release_notes INTEGER,
  published_notes INTEGER,
  draft_notes INTEGER,
  total_subscribers INTEGER,
  active_integrations INTEGER
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    (SELECT COUNT(*)::INTEGER FROM release_notes WHERE org_id = p_org_id),
    (SELECT COUNT(*)::INTEGER FROM release_notes WHERE org_id = p_org_id AND status = 'published'),
    (SELECT COUNT(*)::INTEGER FROM release_notes WHERE org_id = p_org_id AND status = 'draft'),
    (SELECT COUNT(*)::INTEGER FROM subscribers WHERE org_id = p_org_id AND status = 'active'),
    (SELECT COUNT(*)::INTEGER FROM integrations WHERE org_id = p_org_id AND config->>'status' = 'active');
END;
$$ LANGUAGE plpgsql STABLE;

-- Function for recent activity feed (optimized with UNION ALL)
CREATE OR REPLACE FUNCTION get_recent_activity(
  p_org_id UUID,
  p_limit INTEGER DEFAULT 10
)
RETURNS TABLE (
  activity_type TEXT,
  activity_id UUID,
  title TEXT,
  created_at TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  (
    SELECT 
      'release_note'::TEXT as activity_type,
      id as activity_id,
      title,
      created_at
    FROM release_notes 
    WHERE org_id = p_org_id
    ORDER BY created_at DESC
    LIMIT p_limit
  )
  UNION ALL
  (
    SELECT 
      'subscriber'::TEXT as activity_type,
      id as activity_id,
      COALESCE(name, email) as title,
      created_at
    FROM subscribers 
    WHERE org_id = p_org_id
    ORDER BY created_at DESC
    LIMIT p_limit
  )
  ORDER BY created_at DESC
  LIMIT p_limit;
END;
$$ LANGUAGE plpgsql STABLE;

-- ======================================
-- 3. PERFORMANCE MONITORING VIEWS
-- ======================================

-- View for monitoring slow queries
DROP VIEW IF EXISTS query_performance_monitor;
CREATE OR REPLACE VIEW query_performance_monitor AS
SELECT 
  sui.schemaname,
  sui.relname as tablename,
  sui.indexrelname as indexname,
  sui.idx_scan,
  sui.idx_tup_read,
  sui.idx_tup_fetch
FROM pg_stat_user_indexes sui
WHERE sui.idx_scan > 0
ORDER BY sui.idx_scan DESC;

-- View for table size monitoring
CREATE OR REPLACE VIEW table_size_monitor AS
SELECT 
  schemaname,
  tablename,
  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,
  pg_total_relation_size(schemaname||'.'||tablename) as size_bytes
FROM pg_tables 
WHERE schemaname = 'public'
ORDER BY size_bytes DESC;

-- ======================================
-- 4. CLEANUP AND MAINTENANCE
-- ======================================

-- Function to cleanup old oauth states (performance optimization)
DROP FUNCTION IF EXISTS cleanup_expired_oauth_states();
CREATE OR REPLACE FUNCTION cleanup_expired_oauth_states()
RETURNS INTEGER AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM oauth_states 
  WHERE created_at < NOW() - INTERVAL '1 hour';
  
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  
  RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Function to cleanup old ticket cache entries
DROP FUNCTION IF EXISTS cleanup_old_ticket_cache();
CREATE OR REPLACE FUNCTION cleanup_old_ticket_cache()
RETURNS INTEGER AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM ticket_cache 
  WHERE fetched_at < NOW() - INTERVAL '30 days'
    AND status NOT IN ('open', 'in_progress');
  
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  
  RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- ======================================
-- 5. STATISTICS AND ANALYSIS
-- ======================================

-- Update table statistics for query optimizer
ANALYZE organizations;
ANALYZE integrations;
ANALYZE release_notes;
ANALYZE ticket_cache;
ANALYZE subscribers;
ANALYZE organization_members;

-- ======================================
-- 6. COMMENTS FOR DOCUMENTATION
-- ======================================

COMMENT ON INDEX idx_release_notes_org_status_created IS 'Optimizes queries filtering by organization, status, and ordering by creation date';
COMMENT ON INDEX idx_release_notes_search_title IS 'Full-text search optimization for release note titles';
COMMENT ON INDEX idx_release_notes_search_content IS 'Full-text search optimization for release note content';
COMMENT ON INDEX idx_release_notes_public_published IS 'Optimizes public release notes queries for public pages';
COMMENT ON FUNCTION search_release_notes IS 'Optimized full-text search for release notes with relevance ranking';
COMMENT ON FUNCTION get_organization_stats IS 'Single query to get all organization dashboard statistics';
COMMENT ON FUNCTION get_recent_activity IS 'Optimized activity feed for organization dashboard';

-- ======================================
